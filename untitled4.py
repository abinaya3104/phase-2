# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M_MNtJN_XOtukyLHzcGUTANF20F73OEr
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Step 1: Generate Synthetic Data
np.random.seed(42)

# Number of customers
n_customers = 1000

# Features: Generating synthetic data
data = {
    'CustomerID': np.arange(1, n_customers + 1),
    'Age': np.random.randint(18, 70, size=n_customers),
    'MonthlySpend': np.random.randint(20, 200, size=n_customers),
    'YearsAsCustomer': np.random.randint(1, 10, size=n_customers),
    'HasSupportIssues': np.random.choice([0, 1], size=n_customers),  # 0 = No, 1 = Yes
    'ServiceUsage': np.random.randint(1, 20, size=n_customers),  # Number of service usage events per month
    'Churned': np.random.choice([0, 1], size=n_customers, p=[0.8, 0.2])  # 0 = No churn, 1 = Churned
}

# Create DataFrame
df = pd.DataFrame(data)

# Step 2: Preprocess Data
# Drop CustomerID since it's not relevant for the model
df = df.drop(columns=['CustomerID'])

# Split into features (X) and target (y)
X = df.drop(columns=['Churned'])
y = df['Churned']

# Split the data into train and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the feature data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 3: Train the Machine Learning Model
# Using RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Step 4: Make Predictions and Evaluate the Model
y_pred = model.predict(X_test_scaled)

# Evaluate Model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))